
// 描述
// bubble sort 
// sinking sort
// 重复比较 相邻两个元素 直到整个数组没有数字可以再进行交换

// 数据可视化 viz
// 越大的越早完成排序
// 越大的越晚完成排序

// 问题抽象
// function bubble_sort(A)
//  A:需要排序的数组
// return ：无


// 双层循环
// 1 外层的循环不变式
//   控制大的方向：每次排序一个数字，将一个大的数字慢慢冒上来。。
//   第k次循环执行后，前k次大的值的顺序排列在位置i
//   循环执行后，位置i以及它右边的值处于排序状态

// 2 内层循环不变式
//   每次循环结束时控制变量j指向0-j元素中最大的值

function bubble_sort(A){
    for(let i = A.length-1;i>=1;i--){
        for(let j = 1; j<=i;j++){
            if(A[j-1]>A[j]){
                // 交换
                const t = A[j]
                A[j] = A[j-1]
                A[j-1] = t
            }// 这个判断运行时间是和规模无关的
            // 内层循环结束j指向 A[0]-A[j]中的最大指
        }
        // 外层循环结束后，A[i] -A[n-1]已经排序（最后面的）
    }
}

const A = [3,1,6,7,4,2,0]
bubble_sort(A)
console.log(A)


// 执行效率
// 内层 i次
// 外层 N-1次